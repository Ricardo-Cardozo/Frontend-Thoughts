{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rica_\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\Pensamentos\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport './Container.css';\nimport Card from '../components/Card';\nimport ErrorMessage from '../components/ErrorMessage';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport Input from '../components/Input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [thoughts, setThoughts] = useState([]);\n  const [error, setError] = useState('');\n  const [search, setSearch] = useState('');\n  const [filterThoughts, setFIlterThoughts] = useState([]);\n  const getUsers = useCallback(async () => {\n    try {\n      const response = await fetch('http://localhost:9000/thoughts/');\n      const responseData = await response.json();\n      if (!response.ok) {\n        throw new Error(responseData.message || 'Not found thoughts, make a register!');\n      }\n      setThoughts(...[responseData]);\n    } catch (err) {\n      setError(err.message || \"Not found thoughts, make a register!\");\n    }\n  }, []);\n  useEffect(() => {\n    getUsers();\n  }, [getUsers]);\n  const use = useMemo(() => {\n    setFIlterThoughts(Array.isArray(thoughts.thoughts) && thoughts.thoughts.filter(thought => {\n      return thought.title.toLowerCase().includes(search.toLocaleLowerCase());\n    }));\n    console.log(filterThoughts);\n  }, [search, thoughts, filterThoughts]);\n  useEffect(() => {\n    console.log(use);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Your Thoughts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this), !error ? /*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      name: \"search\",\n      id: \"search\",\n      placeholder: \"Search any thought\",\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }, this) : '', !error ? Array.isArray(filterThoughts) && filterThoughts.length > 0 ? filterThoughts.map((thought, i) => /*#__PURE__*/_jsxDEV(Card, {\n      title: thought.title,\n      description: thought.description\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)) : /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      children: \"Thought not found!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this) : '']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"w/vHpEZouTM6nyTdJYtg+4ExcLo=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["Card","ErrorMessage","useCallback","useEffect","useMemo","useState","Input","Home","thoughts","setThoughts","error","setError","search","setSearch","filterThoughts","setFIlterThoughts","getUsers","response","fetch","responseData","json","ok","Error","message","err","use","Array","isArray","filter","thought","title","toLowerCase","includes","toLocaleLowerCase","console","log","e","target","value","length","map","i","description"],"sources":["C:/Users/rica_/OneDrive/Área de Trabalho/Pensamentos/frontend/src/pages/Home.js"],"sourcesContent":["import './Container.css'\r\nimport Card from '../components/Card'\r\nimport ErrorMessage from '../components/ErrorMessage'\r\nimport { useCallback, useEffect, useMemo, useState } from 'react'\r\nimport Input from '../components/Input'\r\n\r\nconst Home = () => {\r\n  const [thoughts, setThoughts] = useState([])\r\n  const [error, setError] = useState('')\r\n  const [search, setSearch] = useState('')\r\n  const [filterThoughts, setFIlterThoughts] = useState([])\r\n\r\n  const getUsers = useCallback(async () => { \r\n      try {\r\n        const response = await fetch('http://localhost:9000/thoughts/')\r\n        const responseData = await response.json()\r\n        if (!response.ok) {\r\n          throw new Error(responseData.message || 'Not found thoughts, make a register!')\r\n        }\r\n        setThoughts(...[responseData])\r\n      } catch (err) {\r\n        setError(err.message ||\"Not found thoughts, make a register!\")\r\n      }\r\n    \r\n  },[])\r\n\r\n  useEffect(() => {\r\n    getUsers()\r\n  }, [getUsers])\r\n  \r\n\r\n  const use = useMemo(() => {\r\n    setFIlterThoughts(\r\n      Array.isArray(thoughts.thoughts) && thoughts.thoughts.filter(thought => {\r\n        return thought.title.toLowerCase().includes(search.toLocaleLowerCase())\r\n      })\r\n    )\r\n    console.log(filterThoughts)\r\n  },[search, thoughts, filterThoughts])\r\n\r\n  useEffect(() => {\r\n    console.log(use)\r\n  }, [])\r\n\r\n  return (\r\n    <div className='container'>\r\n      <h1>Your Thoughts</h1>\r\n      {error && <ErrorMessage>{error}</ErrorMessage> }\r\n      {!error \r\n        ? <Input \r\n            type=\"text\" \r\n            name=\"search\" \r\n            id=\"search\" \r\n            placeholder='Search any thought' \r\n            onChange={e => setSearch(e.target.value)}\r\n          /> \r\n        : ''\r\n      }\r\n      {!error \r\n        ? Array.isArray(filterThoughts) \r\n        && filterThoughts.length > 0 \r\n          ? filterThoughts.map((thought, i) => (\r\n            <Card\r\n              key={i}\r\n              title={thought.title}\r\n              description={thought.description}\r\n            />\r\n          )) \r\n          : <ErrorMessage>Thought not found!</ErrorMessage>\r\n        : ''\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home"],"mappings":"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"},"metadata":{},"sourceType":"module"}